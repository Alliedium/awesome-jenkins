<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1292.v27d8cc3e2602">
    <actions>
        <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2131.vb_9788088fdb_5"/>
        <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2131.vb_9788088fdb_5">
            <jobProperties/>
            <triggers/>
            <parameters>
                <string>MAVEN_VERSION</string>
                <string>CHECKSTYLE_RULES_SET</string>
            </parameters>
            <options/>
        </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
    </actions>
    <description/>
    <keepDependencies>false</keepDependencies>
    <properties>
        <hudson.model.ParametersDefinitionProperty>
            <parameterDefinitions>
                <hudson.model.ChoiceParameterDefinition>
                    <name>CHECKSTYLE_RULES_SET</name>
                    <description>Select xml file with checkstyle rules</description>
                    <choices class="java.util.Arrays$ArrayList">
                        <a class="string-array">
                            <string>sun_checks</string>
                            <string>sun_checks_with_suppressions</string>
                            <string>custom_checks</string>
                            <string>custom_checks_with_suppressions</string>
                        </a>
                    </choices>
                </hudson.model.ChoiceParameterDefinition>
                <hudson.model.ChoiceParameterDefinition>
                    <name>MAVEN_VERSION</name>
                    <description>Select maven version</description>
                    <choices class="java.util.Arrays$ArrayList">
                        <a class="string-array">
                           {% for version in jenkins_maven_installations %}
                            <string>maven{{ version }}</string>
                           {% endfor %}
                        </a>
                    </choices>
                </hudson.model.ChoiceParameterDefinition>
            </parameterDefinitions>
        </hudson.model.ParametersDefinitionProperty>
        <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
            <triggers>
<!--        <hudson.triggers.TimerTrigger>-->
<!--          <spec>H 10-18 * * *</spec>-->
<!--        </hudson.triggers.TimerTrigger>-->
                <org.jenkinsci.plugins.pipeline.maven.trigger.WorkflowJobDependencyTrigger plugin="pipeline-maven@1298.v43b_82f220a_e9">
                    <spec/>
                </org.jenkinsci.plugins.pipeline.maven.trigger.WorkflowJobDependencyTrigger>
                <com.cloudbees.jenkins.GitHubPushTrigger plugin="github@1.37.0">
                    <spec/>
                </com.cloudbees.jenkins.GitHubPushTrigger>
            </triggers>
        </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
    </properties>
    <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3659.v582dc37621d8">
        <script>pipeline {
            agent any
            parameters {
            choice(
            choices: [&apos;sun_checks&apos;, &apos;sun_checks_with_suppressions&apos;, &apos;custom_checks&apos;, &apos;custom_checks_with_suppressions&apos;],
            description: &apos;Select xml file with checkstyle rules&apos;,
            name: &apos;CHECKSTYLE_RULES_SET&apos;)
            choice(
            choices: [&apos;maven3.8.4&apos;, &apos;maven3.9.0&apos;],
            description: &apos;Select maven version&apos;,
            name: &apos;MAVEN_VERSION&apos;)
            }


            stages {
            stage( &apos;Clone&apos;) {
            steps {
            git url: &apos;https://github.com/KaIsa9/springboot-api-rest-example.git/&apos;
            }
            }
            stage(&apos;Build&apos;){
            options {
            timeout(time:10, unit: &apos;MINUTES&apos; )
            }
            steps{
            echo &apos;Download dependencies&apos;
            withMaven(maven: getMavenVersion(params.MAVEN_VERSION), publisherStrategy: &apos;EXPLICIT&apos;){
            sh &quot;cd api \n\
            mvn -X -ntp install -P default&quot;
            }
            }
            }
            stage(&apos;Static code analysis&apos;){
            options {
            timeout(time:10, unit: &apos;MINUTES&apos; )
            }
            steps{
            script{
            echo &apos;Static code analysis&apos;
            currentCheckstyleRulesStr = getCheckstyleRules(params.CHECKSTYLE_RULES_SET)
            sh &quot;echo ${currentCheckstyleRulesStr} \n\
            cd api\n\
            mvn -X install -P static-code-analysis ${currentCheckstyleRulesStr}\n\
            echo \&quot;static code analysis finished\&quot;&quot;
            }

            echo &quot;Reading static analysis report&quot;
            recordIssues enabledForFailure: true, failOnError: false, tool:checkStyle(pattern: &quot;**/target/checkstyle-result.xml&quot;)
            recordIssues enabledForFailure: true, failOnError: false, tool:spotBugs(pattern: &quot;**/target/spotbugs*.xml&quot;)
            recordIssues enabledForFailure: true, failOnError: false, tool:cpd(pattern: &quot;**/target/cpd.xml&quot;)
            recordIssues enabledForFailure: true, failOnError: false, tool:pmdParser(pattern: &quot;**/target/pmd.xml&quot;)
            }
            }

            stage(&apos;Test&apos;){
            options {
            timeout(time:10, unit: &apos;MINUTES&apos; )
            }
            steps{
            script{
            echo &apos;Test&apos;
            withMaven(maven: getMavenVersion(params.MAVEN_VERSION), publisherStrategy: &apos;EXPLICIT&apos;){
            sh &quot;cd api\n\
            mvn install -P tests&quot;
            }
            }

            publishHTML([
            allowMissing: true,
            keepAll:true,
            alwaysLinkToLastBuild: true,
            reportDir: &apos;api/target/site/jacoco&apos;,
            reportFiles: &apos;index.html&apos;,
            reportName: &apos;Jacoco coverage HTML report&apos;])
            }
            }
            }
            }
            def getMavenVersion(String selectedMavenVersion) {
            String mvnVersion = &apos;&apos;
            switch(selectedMavenVersion){
            case &quot;maven3.8.4&quot;:
            mvnVersion = &apos;maven3.8.4&apos;
            break
            case &quot;maven3.9.0&quot;:
            mvnVersion = &apos;maven3.9.0&apos;
            break
            default:
            mvnVersion = &apos;maven3.8.4&apos;
            break
            }
            return mvnVersion
            }


            def getCheckstyleRules(String selectedCheckstyleRules) {
            String mvnOptions = &apos;&apos;
            switch(selectedCheckstyleRules){
            case &quot;sun_checks&quot;:
            mvnOptions = &apos;-Dcodestyle.checks.file=./codestyle/sun_checks.xml&apos;
            break
            case &quot;sun_checks_with_suppressions&quot;:
            mvnOptions = &apos;-Dcodestyle.checks.file=./codestyle/sun_checks.xml -Dcodestyle.suppressions.file=./codestyle/checkstyle_suppressions.xml&apos;
            break
            case &quot;custom_checks&quot;:
            mvnOptions = &apos;-Dcodestyle.checks.file=./codestyle/checkstyle_checks.xml&apos;
            break
            case &quot;custom_checks_with_suppressions&quot;:
            mvnOptions = &apos;-Dcodestyle.checks.file=./codestyle/checkstyle_checks.xml -Dcodestyle.suppressions.file=./codestyle/checkstyle_suppressions.xml&apos;
            break
            default:
            mvnOptions = &apos;-Dcodestyle.checks.file=./codestyle/sun_checks.xml&apos;
            break
            }
            return mvnOptions
            }</script>
        <sandbox>true</sandbox>
    </definition>
    <authToken>newToken</authToken>
    <disabled>false</disabled>
</flow-definition>